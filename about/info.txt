// 08.02.2023	Знакомство с JavaScript
				Полезный ресурс: https://learn.javascript.ru/
				Установка node.js
				Установка Sublime Text
				Установка Visual Studio Code
				Справочники и спецификации: https://learn.javascript.ru/manuals-specifications
				Страница для тестов браузера: https://learn.javascript.ru/article/devtools/bug.html
				*Установить расширение Live Server в Visual Studio Code и отключить на первое время

// 08.02.2023	Работа с браузером и консолью.
				F12 (Windows) - открытие консоли в браузере
				Enter - ввод данных в консоль
				Shift + Enter - переход на другую строку
				Программы на JavaScript могут быть вставлены в любое место HTML-документа с помощью тега <script> 
				<script>
    				alert('Привет, мир!');
  				</script>

 // 08.02.2023	Разметки (Признаки старого кода)
 				Атрибут type: <script type=…> - Старый стандарт HTML, HTML4, требовал наличия этого атрибута в теге <script>
 				Атрибут language: <script language=…> - атрибут должен был задавать язык, на котором написан скрипт
 				Скрытие скрипта в HTML-комментарии: <script type="text/javascript"><!--...//--></script>

 // 08.02.2023	Пути хранения скрипта
 				Здесь /path/to/script.js – это абсолютный путь до скрипта от корня сайта. 
 				Также можно указать относительный путь от текущей страницы: src="script.js" или src="./script.js" будет означать, 
				что файл "script.js" находится в текущей папке.
 				В одном теге <script> нельзя использовать одновременно атрибут src и код внутри

 // 09.02.2023	Структура кода
 				Обычно каждую инструкцию пишут на новой строке, чтобы код было легче читать, рекомендуется ставить всегда символ ";":
 				alert('Привет');
				alert('Мир');
				Ошибки, которые при этом появляются (если не ставить ;), достаточно сложно обнаруживать и исправлять
				Инструкцию можно написать и в одну строку, но не рекомендуется: alert('Привет'); alert('Мир');
				В большинстве случаев новая строка подразумевает точку с запятой. Но «в большинстве случаев» не значит «всегда»:
				alert(3 +
				1
				+ 2);

// 09.02.2023	Комментарии
				Однострочные: //
				Многострочные: /* ... */
				Ctrl + / - выбор нужной строки и ее мгновенное комментирование
				Вложенные комментарии не поддерживаются!

// 09.02.2023   В .js файле, в самом верху можно прописать // @ts-check , в компиляторе будет подсвечиваться различные несоответсвия логики в коде.

// 09.02.2023	Строгий режим — "use strict"
				Если требуется запуск приложения, где используется устаревший синтаксис, в первую строчку мы вписываем: "use strict";
				Еще его можно подключать к кнокретной функции. После подключения, его уже невозможно отменить.
				Над "use strict" могут быть записаны только комментарии.
				В дальнейшем, когда вы будете использовать консоль браузера для тестирования функций, обратите внимание, 
				что use strict по умолчанию в ней выключен.
				По умолчанию, всегда рекомендуется указывать "use strict" в начале документа/работы в консоли.

// 09.02.2023	Для объявления переменной в JavaScript используйте ключевое слово let.
				let message = 'Hello';
				alert(message);
				Имя переменной должно содержать только буквы, цифры или символы $ и _.
				Правило написания переменной: camelCase

// 09.02.2023	Константы
				Объявление и инициализация константы: const myBirthday = '18.04.1982';
				Широко распространена практика использования констант в качестве псевдонимов для трудно запоминаемых значений, 
				которые известны до начала исполнения скрипта.
				Названия таких констант пишутся с использованием заглавных букв и подчёркивания.
				const COLOR_RED = "#F00";

// 10.02.2023	Типы данных
				Есть восемь основных типов данных в JavaScript: number, bigint, string, boolean, null, undefined, symbol, object.
				Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число.
				Языки программирования, в которых такое возможно, называются «динамически типизированными».

// 10.02.2023	Числа			
				Кроме обычных чисел, существуют так называемые «специальные числовые значения», 
				которые относятся к этому типу данных: Infinity, -Infinity и NaN.
				Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
				Мы можем получить его в результате деления на ноль или задать явно: alert( 1 / 0 ); alert( Infinity );
				NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции.
				Если где-то в математическом выражении есть NaN, то оно распространяется на весь результат 
				(есть только одно исключение: NaN ** 0 равно 1).
				Скрипт никогда не остановится с фатальной ошибкой (не «умрёт»). В худшем случае мы получим NaN как результат выполнения.
				Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины: 
				const bigInt = 1234567890123456789012345678901234567890n;

// 10.02.2023	В JavaScript существует три типа кавычек: "Привет", 'Привет', `Привет` и интерполяция ${...}.
				Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.
				Обратные же кавычки имеют расширенную функциональность. Они позволяют нам встраивать выражения в строку, заключая их в ${…}.
				Например: alert( `результат: ${1 + 2}` );

// 10.02.2023	Булевый (логический) тип
				let nameFieldChecked = true;
				Булевые значения также могут быть результатом сравнений: let isGreater = 4 > 1; alert( isGreater );

// 10.02.2023	Значение «null» и «undefined»
				В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.
				Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
				null является объектом: let age = null;
				Значение «undefined» означает, что «значение не было присвоено» - результат ошибки.
				Обычно null используется для присвоения переменной «пустого» или «неизвестного» значения, а undefined – для проверок, 
				была ли переменная назначена.

// 10.02.2023	Объекты и символы
				object -  В объектах же хранят коллекции данных или более сложные структуры.
				symbol (символ) используется для создания уникальных идентификаторов в объектах.

// 10.02.2023	Оператор typeof
				Оператор typeof возвращает тип аргумента - позволяет узнать тип данных.
				Это полезно, когда мы хотим обрабатывать значения различных типов по-разному или просто хотим сделать проверку.
				У него есть две синтаксические формы: синтаксис оператора: typeof x и синтаксис функции: typeof(x).
				Он работает со скобками или без скобок. Результат одинаковый.

// 10.02.2023	Взаимодействие: alert, prompt, confirm

				alert - небольшое окно с сообщением называется модальным окном. 
				Понятие модальное означает, что пользователь не может взаимодействовать с интерфейсом остальной части страницы, 
				нажимать на другие кнопки и т.д. до тех пор, пока взаимодействует с окном.

				prompt - функция prompt принимает до двух аргументов. Этот код отобразит модальное окно с текстом, полем для ввода текста и кнопками OK/Отмена.
				Пример: let result = prompt('ЗАГОЛОВОК', 'ТЕКСТ ВНУТРИ ФОРМЫ ВВОДА');

				confirm - Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена / True и False.
				Пример: result = confirm(question); 

На каком этапе закончил обучение
1) learn.javascript - пункт 2.7